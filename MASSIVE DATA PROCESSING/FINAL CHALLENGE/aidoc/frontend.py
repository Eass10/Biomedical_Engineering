import streamlit as st
import os
from urllib.parse import urlencode
import httpx
import pandas as pd

BE_HOST = os.getenv("IB_HOST", "127.0.0.1:8051")
BE_TIMEOUT = 60  # one minute, but can be increased as needed


def get_user_question_results(user_question: str):
    """
    Get results from the Backend API regarding the user's question

    Args:
        user_question: the question of the user

    Returns:
        the answer to the user's question
    """
    query_args = {"user_question": user_question}
    url = f"http://{BE_HOST}/search?{urlencode(query_args)}"
    response = httpx.get(url, timeout=BE_TIMEOUT)
    response.raise_for_status()
    return response.json()


## MAIN ##
st.set_page_config(page_title="ASK2SQLGEN", layout="wide")

st.title("AIDOC :robot_face:")
st.write("<br>", unsafe_allow_html=True)
st.write("<br>", unsafe_allow_html=True)
st.write(
    f"This is a prototype designed for providing medical information and knowledge through "
    f"queries generated by Large Language Models (LLMs): "
)
st.write("<br>", unsafe_allow_html=True)
st.write("<br>", unsafe_allow_html=True)
st.write("<br>", unsafe_allow_html=True)

main_left_col, main_right_col = st.columns([0.5, 0.5], gap="large")

with main_left_col:
    question = st.text_input("Enter your question here", key="query_input")
    get_sql_button = st.button("Give me the answer!")

if get_sql_button:
    with main_right_col:
        st.write("Results of your query:")
        try:
            if question.strip() == "":
                st.write("Sorry, there is no question provided")
            else:
                results = get_user_question_results(question)
                answer = results.get("user_answer")
                if answer:
                    st.write(answer)
                    explanation = results.get("query_explanation")
                    if explanation:
                        st.write(explanation)
                else:  # question invalid
                    st.write(results.get("validity"), ':', results.get("justification"))
                if "exec_answer" in results:
                    exec_answer = results.get("exec_answer")
                    if exec_answer == '[]':
                        st.write("The question returned no data.")
                    else:
                        st.dataframe(pd.read_json(exec_answer))

        except Exception as e:
            st.write(f":broken_heart: Sorry, something went wrong: {e}")