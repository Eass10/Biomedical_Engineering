<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef prac2 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure         matlab.ui.Figure
        GridLayout       matlab.ui.container.GridLayout
        LeftPanel        matlab.ui.container.Panel
        rSlider          matlab.ui.control.Slider
        rSliderLabel     matlab.ui.control.Label
        CalculateButton  matlab.ui.control.Button
        rEditField       matlab.ui.control.NumericEditField
        rEditFieldLabel  matlab.ui.control.Label
        RightPanel       matlab.ui.container.Panel
        UIAxes           matlab.ui.control.UIAxes
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: CalculateButton
        function CalculateButtonPushed(app, event)
            x = linspace(-1,1,100);
            y = app.rEditField.Value*x;
            plot(app.UIAxes,x,y,'r')
        end

        % Value changed function: rSlider
        function rSliderValueChanged(app, event)
            value = app.rSlider.Value;
            app.rEditField.Value = value;
            % cla(app.UIAxes)

            syms x t
            fx = value*x-x^3;
            Fpts1 = solve(fx);

            fxd = diff(fx,x);
            fxd_Fpts = subs(fxd,x,Fpts1);
            disp('Stable Fixed Points:'); stb = double(Fpts1(fxd_Fpts<0))
            disp('Instable Fixed Points:'); nstb = double(Fpts1(fxd_Fpts>0))

            xi = -3; xf = 3;
            xsmp = xi:1e-2:xf;
            plot(app.UIAxes,xsmp,zeros(size(xsmp)),'k');hold(app.UIAxes,'on')
            fplot(app.UIAxes,fx,[xi,xf],'b');
            plot(app.UIAxes,stb,zeros(size(stb)),'o','MarkerFaceColor','r');
            plot(app.UIAxes,nstb,zeros(size(nstb)),'ro')
            rowPts = [-2,0,2];
            xsmp_r = xsmp(subs(fx,x,xsmp)>0);
            xsmp_l = xsmp(subs(fx,x,xsmp)<0);
            plot(app.UIAxes,xsmp_r,zeros(size(xsmp_r)),'g'); %plot(app.UIAxes,-3,0,'>');plot(app.UIAxes,3,0,'>');
            plot(app.UIAxes,xsmp_l,zeros(size(xsmp_l)),'m'); %plot(app.UIAxes,0,0,'<');
            hold(app.UIAxes,'off')
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.UIFigure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 2x1 grid
                app.GridLayout.RowHeight = {480, 480};
                app.GridLayout.ColumnWidth = {'1x'};
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 1;
            else
                % Change to a 1x2 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {233, '1x'};
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 2;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.AutoResizeChildren = 'off';
            app.UIFigure.Position = [100 100 640 480];
            app.UIFigure.Name = 'MATLAB App';
            app.UIFigure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);

            % Create GridLayout
            app.GridLayout = uigridlayout(app.UIFigure);
            app.GridLayout.ColumnWidth = {233, '1x'};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';

            % Create LeftPanel
            app.LeftPanel = uipanel(app.GridLayout);
            app.LeftPanel.Layout.Row = 1;
            app.LeftPanel.Layout.Column = 1;

            % Create rEditFieldLabel
            app.rEditFieldLabel = uilabel(app.LeftPanel);
            app.rEditFieldLabel.HorizontalAlignment = 'right';
            app.rEditFieldLabel.Position = [40 424 25 22];
            app.rEditFieldLabel.Text = 'r';

            % Create rEditField
            app.rEditField = uieditfield(app.LeftPanel, 'numeric');
            app.rEditField.Tag = 'r';
            app.rEditField.Position = [80 424 100 22];

            % Create CalculateButton
            app.CalculateButton = uibutton(app.LeftPanel, 'push');
            app.CalculateButton.ButtonPushedFcn = createCallbackFcn(app, @CalculateButtonPushed, true);
            app.CalculateButton.Position = [80 396 100 23];
            app.CalculateButton.Text = 'Calculate';

            % Create rSliderLabel
            app.rSliderLabel = uilabel(app.LeftPanel);
            app.rSliderLabel.HorizontalAlignment = 'right';
            app.rSliderLabel.Position = [18 346 25 22];
            app.rSliderLabel.Text = 'r';

            % Create rSlider
            app.rSlider = uislider(app.LeftPanel);
            app.rSlider.Limits = [-10 10];
            app.rSlider.MajorTicks = [-10 -5 0 5 10];
            app.rSlider.MajorTickLabels = {'-10', '-5', '0', '5', '10'};
            app.rSlider.ValueChangedFcn = createCallbackFcn(app, @rSliderValueChanged, true);
            app.rSlider.Position = [64 355 143 3];

            % Create RightPanel
            app.RightPanel = uipanel(app.GridLayout);
            app.RightPanel.Tag = 'fig1';
            app.RightPanel.Layout.Row = 1;
            app.RightPanel.Layout.Column = 2;

            % Create UIAxes
            app.UIAxes = uiaxes(app.RightPanel);
            title(app.UIAxes, 'Phase Portrait')
            xlabel(app.UIAxes, 'X')
            ylabel(app.UIAxes, 'Y')
            zlabel(app.UIAxes, 'Z')
            app.UIAxes.XGrid = 'on';
            app.UIAxes.YGrid = 'on';
            app.UIAxes.Tag = 'plt';
            app.UIAxes.Position = [18 217 370 229];

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = prac2

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>